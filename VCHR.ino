
#include <Wire.h>
#include <Servo.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Adafruit_PWMServoDriver.h>
#include <EEPROM.h>

int state;

// Project Name
String Project_Name = "Voice Controlled Humanoid Robot";

// I2C Address 0x40 (inter-integrated circuit) 
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Servos Matrix
const int ALLMATRIX = 19;        // 0 ~ 15 Servo + GPIO12 + GPIO14 + Delay Time + PWM Frequency Calibration
const int ALLSERVOS = 18;        // 0 ~ 15 Servo + GPIO12 + GPIO14

// PWM Pulse Traveling 
const int PWM_Frequency = 320;   // PWM frequency 320Hz
const int PWM_Min = 1;           // PWM Minimum Pulse Width 1Hz
const int PWM_Max = 120;         // PWM Maximum Pulse Width 120Hz
const int Servo_Min = 1110;      // Minimum Pulse length 1110ms
const int Servo_Max = 2700;      // Maximum Pulse length 2700ms

// Servo Delay Base Time
const int BASEDELAYTIME = 10;    // 10ms

// Nodemcu Password
const char WiFi_Pass[] = "12345678";

// Servo PWM Frequency
int Set_PWM_Freq = PWM_Frequency;

//total mem 128 KB, eeprom=512 bytes, one action= 1 int variable= 4 bytes, 512/4=128 actions
//we can store 128 actions due to limitations of battery timing.

// Function Data Index
int Servo_PROGRAM;
int Servo_PROGRAM_Stack;

// Servo ID
int GPIO_ID;
//for neck movement general purpose o/p signal
int GPIO12_PWM;
int GPIO13_PWM; //GPIO14

// Run Servo Values
int Running_Servos [ALLMATRIX];

// Port 80 is default for HTTP
ESP8266WebServer server(80);

Servo GPIO12SERVO;
Servo GPIO13SERVO;//GPIO14SERVO

//motor numbering from front left 0= foot, 1=ankle, 2= knee, 3= rib, 4= wakhi, 5= shoulder, 6= elbow, 7= wrist,
//8= right wrist, 9= r.elbow, 10= r.shoulder, 11= r.wakhi, 12=r.rib, 13=r.knee, 14=r.ankle, 15= r.foot, G12= head neck

/*============================================================================*/

// Zero Condition 
////////////////////////////      0,   1,   2,   3,   4,   5,    6,   7,   8,   9,    10,  11,  12,  13,  14,  15,  G12, G14,  ms
int Servo_Act_0 [ ] PROGMEM = {   65,  35,  80,  60,  80,  100,  20,  80,  40,  100,  20,  30,  55,  35,  75,  50,   90,  90,   0  };


/*============================================================================*/

// Initial Condition 
////////////////////////////      0,   1,   2,   3,   4,   5,    6,   7,   8,   9,    10,  11,  12,  13,  14,  15,  G12, G14,  ms
int Servo_Act_1 [ ] PROGMEM = {   65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,   90,  90,   0  };


/*============================================================================*/

int Forward_Step = 16;
int Forward [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12,  G14, ms
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,   90,  100  },
  {    75,  35,  80,  60,  90,  100,  84,  68,  52,  36,  20,  40,  55,  35,  75,  60,  90,   90,  160  },
  {    75,  35,  80,  60,  88,  100,  84,  68,  52,  36,  20,  41,  82,  96,  46,  60,  90,   90,  220  },
  {    72,  35,  80,  60,  90,  86,   84,  68,  52,  36,  1,   40,  94,  75,  72,  57,  90,   90,  220  },
  {    55,  58,  63,  58,  70,  72,   84,  68,  52,  36,  5,   20,  81,  65,  65,  40,  90,   90,  380  },
  {    55,  64,  19,  33,  69,  100,  84,  68,  52,  36,  20,  22,  55,  35,  75,  40,  90,   90,  180  },
  {    58,  38,  40,  21,  70,  119,  84,  68,  52,  36,  34,  20,  55,  35,  75,  43,  90,   90,  220  },
  {    75,  45,  50,  34,  90,  115,  84,  68,  52,  36,  48,  40,  57,  52,  52,  60,  90,   90,  360  },
  {    75,  35,  80,  60,  88,  100,  84,  68,  52,  36,  20,  41,  82,  96,  46,  60,  90,   90,  220  },
  {    72,  35,  80,  60,  90,  86,   84,  68,  52,  36,  1,   40,  94,  75,  72,  57,  90,   90,  220  },
  {    55,  58,  63,  58,  70,  72,   84,  68,  52,  36,  5,   20,  81,  65,  65,  40,  90,   90,  380  },
  {    55,  64,  19,  33,  69,  100,  84,  68,  52,  36,  20,  22,  55,  35,  75,  40,  90,   90,  180  },
  {    58,  38,  40,  21,  70,  119,  84,  68,  52,  36,  34,  20,  55,  35,  75,  43,  90,   90,  220  },
  {    75,  45,  50,  34,  90,  115,  84,  68,  52,  36,  48,  40,  57,  52,  52,  60,  90,   90,  360  },
  {    75,  35,  80,  60,  88,  100,  84,  68,  52,  36,  20,  41,  82,  96,  46,  60,  90,   90,  180  },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,   90,  580  }  
};


/*============================================================================*/

int Back_Step = 10;
int Back [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12,  G14, ms
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,   90,  100  },
  {    75,  35,  80,  60,  88,  101,  84,  68,  52,  36,  20,  38,  55,  35,  75,  60,  90,   90,  160  },
  {    75,  35,  80,  60,  87,  100,  84,  68,  52,  36,  20,  39,  82,  96,  46,  60,  90,   90,  360  },
  {    75,  35,  70,  44,  88,  115,  84,  68,  52,  36,  48,  38,  57,  52,  56,  60,  90,   90,  360  },
  {    53,  38,  40,  21,  71,  119,  84,  68,  52,  36,  34,  22,  55,  35,  75,  43,  90,   90,  360  },
  {    55,  64,  19,  33,  71,  100,  84,  68,  52,  36,  20,  22,  55,  35,  75,  40,  90,   90,  180  }, 
  {    55,  54,  63,  58,  72,  72,   84,  68,  52,  36,  5,   22,  71,  45,  75,  40,  90,   90,  360  },
  {    76,  35,  80,  60,  88,  86,   84,  68,  52,  36,  1,   39,  94,  75,  72,  66,  90,   90,  360  },
  {    79,  35,  80,  60,  87,  100,  84,  68,  52,  36,  20,  39,  82,  96,  46,  64,  90,   90,  180  },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,   90,  340  } 
};


/*============================================================================*/

int Turn_Left_Step = 27; 
int Turn_Left [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,  9,   10,  11,  12,  13,  14,  15,  G12  G14, ms
  {    65,  59,  36,  39,  80,  100, 95,  80,  40,  25,  20,  30,  75,  80,  50,  50,  90,  90,  500   },
  {    75,  40,  45,  30,  90,  100, 95,  80,  40,  25,  20,  40,  75,  80,  50,  60,  90,  90,  500   },
  {    80,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  95,  100, 48,  60,  90,  90,  600   }, 
  {    80,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  82,  70,  70,  60,  90,  90,  500   },
  {    75,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  82,  70,  70,  60,  90,  90,  300   },
  {    55,  59,  36,  39,  70,  100, 95,  80,  40,  25,  20,  20,  75,  80,  50,  40,  90,  90,  500   },
  {    55,  62,  15,  17,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  600   },
  {    55,  82,  48,  75,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  500   },
  {    55,  55,  80,  80,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  300   },
  {    75,  40,  45,  30,  90,  100, 95,  80,  40,  25,  20,  40,  75,  80,  50,  60,  90,  90,  500   },
  {    80,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  95,  100, 48,  60,  90,  90,  600   },
  {    80,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  82,  70,  70,  60,  90,  90,  500   },
  {    75,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  82,  70,  70,  60,  90,  90,  300   },
  {    55,  59,  36,  39,  70,  100, 95,  80,  40,  25,  20,  20,  75,  80,  50,  40,  90,  90,  500   },
  {    55,  62,  15,  17,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  600   }, 
  {    55,  82,  48,  75,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  500   },
  {    55,  55,  80,  80,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  300   },
  {    75,  40,  45,  30,  90,  100, 95,  80,  40,  25,  20,  40,  75,  80,  50,  60,  90,  90,  500   },
  {    80,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  95,  100, 48,  60,  90,  90,  600   },
  {    80,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  82,  70,  70,  60,  90,  90,  500   },
  {    75,  59,  36,  39,  90,  70,  95,  80,  40,  25,  0,   40,  82,  70,  70,  60,  90,  90,  300   },
  {    55,  59,  36,  39,  70,  100, 95,  80,  40,  25,  20,  20,  75,  80,  50,  40,  90,  90,  500   },
  {    55,  62,  15,  17,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  600   },
  {    55,  82,  48,  75,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  500   },
  {    55,  55,  80,  80,  70,  70,  95,  80,  40,  25,  0,   20,  75,  80,  50,  35,  130, 90,  300   },
  {    75,  40,  45,  30,  90,  100, 95,  80,  40,  25,  20,  40,  75,  80,  50,  60,  90,  90,  500   },
  {    65,  35,  80,  60,  80,  100, 95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90,  300   }
};


/*============================================================================*/

int Turn_Right_Step = 27;
int Turn_Right [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,   9,   10,  11,  12,  13,  14,  15,   G12, G14, ms
  {    65,  59,  36,  39,  80,  100,  95,  80,  40,  25,  20,  30,  75,  80,  50,  50,   90,  90,  500   },
  {    55,  59,  36,  39,  70,  100,  95,  80,  40,  25,  20,  20,  75,  80,  50,  40,   90,  90,  500   },
  {    55,  62,  15,  17,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  35,   90,  90,  600   },
  {    55,  40,  45,  30,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  35,   90,  90,  500   },
  {    55,  40,  45,  30,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  40,   90,  90,  300   },
  {    75,  40,  45,  30,  90,  100,  95,  80,  40,  25,  20,  40,  75,  80,  50,  60,   90,  90,  500   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  95,  100, 48,  60,   50,  90,  600   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  42,  70,  27,  60,   50,  90,  500   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  35,  35,  51,  60,   50,  90,  300   },
  {    55,  59,  36,  39,  70,  100,  95,  80,  40,  25,  20,  20,  75,  80,  50,  40,   90,  90,  500   },
  {    55,  62,  15,  17,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  35,   90,  90,  600   },
  {    55,  40,  45,  30,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  35,   90,  90,  500   },
  {    55,  40,  45,  30,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  40,   90,  90,  300   },
  {    75,  40,  45,  30,  90,  100,  95,  80,  40,  25,  20,  40,  75,  80,  50,  60,   90,  90,  500   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  95,  100, 48,  60,   50,  90,  600   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  42,  70,  27,  60,   50,  90,  500   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  35,  35,  51,  60,   50,  90,  300   },
  {    55,  59,  36,  39,  70,  100,  95,  80,  40,  25,  20,  20,  75,  80,  50,  40,   90,  90,  500   },
  {    55,  62,  15,  17,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  35,   90,  90,  600   },
  {    55,  40,  45,  30,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  35,   90,  90,  500   },
  {    55,  40,  45,  30,  70,  120,  95,  80,  40,  25,  50,  20,  75,  80,  50,  40,   90,  90,  300   },
  {    75,  40,  45,  30,  90,  100,  95,  80,  40,  25,  20,  40,  75,  80,  50,  60,   90,  90,  500   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  95,  100, 48,  60,   50,  90,  600   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  42,  70,  27,  60,   50,  90,  500   },
  {    80,  59,  36,  39,  90,  120,  95,  80,  40,  25,  50,  40,  35,  35,  51,  60,   50,  90,  300   },
  {    55,  59,  36,  39,  70,  100,  95,  80,  40,  25,  20,  20,  75,  80,  50,  40,   90,  90,  500   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,   90,  90,  300   } 
};


/*============================================================================*/

int Take_Left_Step = 7;
int Take_Left [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12,  G14,  ms
  {    59,  35,  80,  60,  78,  100,  95,  80,  40,  25,  20,  28,  55,  35,  75,  44,  90,   90,  150  },
  {    61,  51,  45,  42,  76,  100,  85,  80,  40,  35,  20,  27,  55,  35,  76,  42,  90,   90,  150  },
  {    52,  44,  59,  49,  67,  100,  85,  80,  40,  35,  20,  27,  55,  35,  76,  45,  90,   90,  150  },
  {    55,  51,  50,  42,  67,  100,  85,  80,  40,  35,  20,  28,  64,  48,  70,  53,  90,   90,  150  },
  {    73,  40,  67,  51,  87,  100,  85,  80,  40,  35,  20,  45,  60,  37,  80,  70,  90,   90,  250  },
  {    71,  40,  67,  51,  83,  100,  85,  80,  40,  35,  20,  34,  76,  76,  56,  60,  90,   90,  250  },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,   90,  250  } 
};


/*============================================================================*/

int Take_Right_Step = 7;
int Take_Right [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12,  G14, ms
  {    71,  35,  80,  60,  81,  100,  95,  80,  40,  25,  20,  31,  55,  35,  75,  56,  90,   90,  150  },
  {    73,  34,  80,  60,  83,  100,  85,  80,  40,  35,  20,  32,  73,  70,  59,  54,  90,   90,  150  },
  {    70,  34,  80,  60,  83,  100,  85,  80,  40,  35,  20,  42,  66,  56,  66,  63,  90,   90,  150  },
  {    62,  40,  67,  51,  83,  100,  85,  80,  40,  35,  20,  41,  73,  65,  59,  60,  90,   90,  150  },
  {    45,  30,  78,  55,  67,  100,  85,  80,  40,  35,  20,  25,  64,  48,  70,  42,  90,   90,  250  },
  {    55,  54,  39,  39,  77,  100,  85,  80,  40,  35,  20,  28,  64,  48,  70,  44,  90,   90,  250  },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,   90,  250  }
};


/*============================================================================*/

int Get_Up_Step = 10;
int Get_Up [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,   9,    10,  11,  12,  13,  14,  15,   G12, G14, ms
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,   20,  30,  55,  35,  75,  50,   90,  90,  500   },
  {    65,  35,  80,  0,   80,  100,  20,  80,  40,  100,  20,  30,  115, 35,  75,  50,   90,  90,  800   },
  {    65,  35,  80,  0,   0,   100,  20,  80,  40,  100,  20,  110, 115, 35,  75,  50,   90,  90,  800   },
  {    0,   35,  80,  60,  0,   15,   20,  80,  40,  100,  105, 110, 55,  35,  75,  120,  90,  90,  800   },
  {    0,   35,  80,  60,  0,   15,   20,  80,  40,  100,  105, 110, 55,  35,  75,  120,  90,  90,  500   },
  {    0,   35,  80,  60,  0,   100,  20,  80,  40,  100,  20,  110, 55,  35,  75,  120,  90,  90,  500   },
  {    0,   65,  0,   0,   0,   100,  20,  80,  40,  100,  20,  110, 120, 120, 55,  120,  90,  90,  700   },
  {    65,  65,  0,   0,   80,  100,  20,  80,  40,  100,  20,  30,  120, 120, 55,  50,   90,  90,  900   },
  {    65,  35,  80,  60,  80,  100,  20,  80,  40,  100,  20,  30,  55,  35,  75,  50,   90,  90,  900   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,   20,  30,  55,  35,  75,  50,   90,  90,  500   }
};


/*============================================================================*/

int Stand_Up_Step = 12;
int Stand_Up [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,   G12, G14, ms
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,   90,  90,  500   },
  {    65,  35,  80,  60,  80, 100,  20,  80,  40,  100, 20,  30,  55,  35,  75,  50,   90,  90,  700   },
  {    65,  35,  80,  60,  80, 15,   20,  80,  40,  100, 105, 30,  55,  35,  75,  50,   90,  90,  700   },
  {    65,  35,  80,  60,  0,  15,   20,  80,  40,  100, 105, 110, 55,  35,  75,  50,   90,  90,  800   },
  {    0,   35,  80,  60,  0,  15,   100, 80,  40,  10,  105, 110, 55,  35,  75,  120,  90,  90,  900   },
  {    0,   35,  80,  60,  0,  15,   100, 80,  40,  10,  105, 110, 55,  35,  75,  120,  90,  90,  500   },
  {    0,   35,  80,  60,  0,  15,   20,  80,  40,  100, 105, 110, 55,  35,  75,  120,  90,  90,  500   },
  {    0,   35,  80,  60,  0,  100,  20,  80,  40,  100, 20,  110, 55,  35,  75,  120,  90,  90,  500   },
  {    0,   65,  0,   0,   0,  100,  20,  80,  40,  100, 20,  110, 120, 120, 55,  120,  90,  90,  700   },
  {    65,  65,  0,   0,  80,  100,  20,  80,  40,  100, 20,  30,  120, 120, 55,  50,   90,  90,  900   },
  {    65,  35,  80,  60,  80, 100,  20,  80,  40,  100, 20,  30,  55,  35,  75,  50,   90,  90,  900   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,   90,  90,  500   }
};


/*============================================================================*/

int Bow_Step = 4;
int Bow [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,   8,    9,   10,   11,  12,   13,  14,  15,   G12, G14,  ms
  {    65,  35,  80,  60,  80,  120,  80,  40,  110,  25,  100,  30,  55,   35,  75,  50,   90,  90,  500   },
  {    65,  20,  80,  10,  80,  120,  80,  40,  110,  25,  100,  30,  102,  35,  90,  50,   90,  90,  500   },
  {    65,  20,  80,  10,  80,  120,  80,  40,  110,  25,  100,  30,  102,  35,  90,  50,   90,  90,  1000  },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,   25,  20,   30,  55,   35,  75,  50,   90,  90,  800   }
};


/*============================================================================*/

int Say_Hello_Step = 9;
int Say_Hello [][ALLMATRIX] PROGMEM = {
  //    0,   1,   2,   3,   4,   5,    6,   7,   8,   9,  10,  11,  12,  13,  14,  15,   G12, G14, ms
  {    65,  35,  80,  60,  80,  100,  95,  80,  20,  70,  120, 30,  55,  35,  75,  50,   50,  90,  500   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  30,  120, 30,  55,  35,  75,  50,   50,  90,  300   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  20,  70,  120, 30,  55,  35,  75,  50,   50,  90,  300   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  30,  120, 30,  55,  35,  75,  50,   50,  90,  300   },
  {    65,  35,  80,  60,  80,  0,    50,  100, 40,  30,  25,  30,  55,  35,  75,  50,   130, 90,  500   },
  {    65,  35,  80,  60,  80,  0,    80,  80,  40,  30,  25,  30,  55,  35,  75,  50,   130, 90,  300   },
  {    65,  35,  80,  60,  80,  0,    50,  100, 40,  30,  25,  30,  55,  35,  75,  50,   130, 90,  300   },
  {    65,  35,  80,  60,  80,  0,    80,  80,  40,  30,  25,  30,  55,  35,  75,  50,   130, 90,  300   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,   90,  90,  500   }
};


/*============================================================================*/

int Dance_Step = 8;
int Dance [][ALLMATRIX] PROGMEM = {
  //   0,   1,   2,   3,   4,   5,    6,   7,    8,  9,    10,  11,  12,  13,  14,  15,   G12, G14, ms
  {    75,  35,  80,  60,  90,  120,  70,  120,  0,  100,  20,  40,  55,  35,  75,  60,   50,  90,  300   },
  {    75,  35,  80,  60,  90,  120,  70,  120,  0,  100,  20,  40,  55,  35,  75,  60,   50,  90,  800   },
  {    55,  35,  80,  60,  70,  100,  20,  120,  0,  50,   0,   20,  55,  35,  75,  40,   130, 90,  300   },
  {    55,  35,  80,  60,  70,  100,  20,  120,  0,  50,   0,   20,  55,  35,  75,  40,   130, 90,  800   },
  {    65,  35,  80,  60,  80,  20,   70,  120,  0,  50,   100, 30,  55,  35,  75,  50,   90,  90,  500   },
  {    65,  20,  80,  45,  80,  20,   105, 120,  0,  10,   100, 30,  70,  35,  89,  50,   90,  90,  500   },
  {    65,  20,  80,  45,  80,  20,   105, 120,  0,  10,   100, 30,  70,  35,  89,  50,   90,  90,  800   },
  {    65,  35,  80,  60,  80,  100,  95,  80,   40, 25,   20,  30,  55,  35,  75,  50,   90,  90,  500   }
};


/*============================================================================*/

int Thank_You_Step = 7;
int Thank_You [][ALLMATRIX] PROGMEM = {
  //    0,   1,   2,   3,   4,   5,    6,   7,   8,   9,  10,  11,  12,  13,  14,  15,   G12, G14, ms
  {    55,  35,  80,  60,  70,  100,  70,  30,  40,  80,  20,  20,  55,  35,  75,  40,   90,  90,  500   },
  {    55,  35,  80,  60,  70,  100,  70,  30,  40,  80,  20,  20,  55,  35,  75,  35,   130, 90,  300   },
  {    55,  35,  80,  60,  70,  100,  70,  30,  100, 10,  100, 40,  55,  35,  75,  30,   130, 90,  500   },
  {    55,  35,  80,  60,  70,  100,  70,  30,  100, 10,  100, 40,  55,  35,  75,  30,   130, 90,  800   },
  {    55,  35,  80,  60,  70,  100,  70,  30,  40,  80,  20,  20,  55,  35,  75,  35,   130, 90,  600   },
  {    55,  35,  80,  60,  70,  100,  70,  30,  40,  80,  20,  20,  55,  35,  75,  40,   90,  90,  500   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,   90,  90,  500   }
};


/*============================================================================*/
int One_Leg_Balance_Step = 15;
int One_Leg_Balance [][ALLMATRIX] PROGMEM = {
    //    0,  1,   2,   3,   4,   5,    6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12, G14, ms
     {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90, 500   },
     {    82,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },

     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  25,  57,  75,  71,  90,  90, 500   },
     
     {    82,  35,  80,  63,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  71,  90,  90, 500   },
     {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90, 500   },
};


/*============================================================================*/

int Warm_Up_Step = 16;
int Warm_Up [][ALLMATRIX] PROGMEM = {
  //    0,  1,   2,   3,   4,   5,    6,   7,   8,    9,   10,  11,  12,  13,  14,  15,   G12, G14,  ms
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   90,  90,  800   },
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   50,  90,  500   },
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   50,  90,  500   },
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   130, 90,  500   },
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   130, 90,  500   },
  {    55,  35,  80,  60,  70,  100,  70,  20,  40,   100, 20,  20,  55,  35,  75,  40,   50,  90,  800   },
  {    55,  35,  80,  60,  70,  100,  70,  20,  40,   100, 20,  20,  55,  35,  75,  40,   50,  90,  500   },
  {    75,  35,  80,  60,  90,  100,  20,  80,  100,  50,  20,  40,  55,  35,  75,  60,   130, 90,  800   },
  {    75,  35,  80,  60,  90,  100,  20,  80,  100,  50,  20,  40,  55,  35,  75,  60,   130, 90,  500   },
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   90,  90,  500   },
  {    65,  62,  15,  17,  80,  15,   95,  80,  40,   25,  100, 30,  95,  100, 48,  50,   90,  90,  800   },
  {    65,  62,  15,  17,  80,  15,   95,  80,  40,   25,  100, 30,  95,  100, 48,  50,   90,  90,  300   },
  {    65,  35,  80,  60,  80,  100,  70,  20,  100,  50,  20,  30,  55,  35,  75,  50,   90,  90,  500   },
  {    65,  62,  15,  17,  80,  15,   95,  80,  40,   25,  100, 30,  95,  100, 48,  50,   90,  90,  800   },
  {    65,  62,  15,  17,  80,  15,   95,  80,  40,   25,  100, 30,  95,  100, 48,  50,   90,  90,  300   },
  {    65,  35,  80,  60,  80,  100,  95,  80,  40,   25,  20,  30,  55,  35,  75,  50,   90,  90,  800   }
};


/*============================================================================*/

int Shake_Hand_Step = 10;
int Shake_Hand  [][ALLMATRIX]   PROGMEM  =  {
  //   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12, G14, ms
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25, 115,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,   0, 130,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,   0,  61,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,   0, 130,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,   0,  61,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,   0, 130,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,   0,  59,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25, 130,  30,  55,  35,  75,  50,  90,  90, 500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90, 500   },
};


/*============================================================================*/

int Driving_Dance_Step = 61;
int Driving_Dance [][ALLMATRIX] PROGMEM = {
  //    0,  1,   2,   3,   4,   5,   6,   7,   8,    9,   10,   11,  12,  13,  14,  15,   G12,  G14,  ms
  {    65,  35,  80,  60,  80,  100, 95,  80,  40,   25,  20,   30,  55,  35,  75,  50,   90,   90,  400  },
  {    65,  35,  80,  60,  80,  25,  85,  10,  110,  35,  100,  30,  55,  35,  75,  50,   90,   90,  300  },
  {    65,  62,  15,  17,  80,  25,  85,  10,  110,  35,  100,  30,  95,  100, 48,  50,   90,   90,  300  },
  {    65,  35,  80,  60,  80,  25,  85,  10,  110,  35,  100,  30,  55,  35,  75,  50,   90,   90,  300  },
  {    65,  62,  15,  17,  80,  25,  85,  10,  110,  35,  100,  30,  95,  100, 48,  50,   90,   90,  300  },
  {    65,  35,  80,  60,  80,  25,  85,  10,  110,  35,  100,  30,  55,  35,  75,  50,   90,   90,  300  },
  {    65,  62,  15,  17,  80,  25,  85,  10,  110,  35,  100,  30,  95,  100, 48,  50,   90,   90,  300  },
  {    65,  35,  80,  60,  80,  25,  85,  10,  110,  35,  100,  30,  55,  35,  75,  50,   90,   90,  300  },
  {    65,  62,  15,  17,  80,  25,  85,  10,  110,  35,  100,  30,  95,  100, 48,  50,   90,   90,  300  },
  {    65,  35,  80,  60,  80,  25,  85,  10,  110,  35,  100,  30,  55,  35,  75,  50,   90,   90,  200  },
  {    65,  35,  80,  60,  80,  50,  95,  80,  40,   25,  70,   30,  55,  35,  75,  50,   90,   90,  100  },
  {    60,  15,  65,  20,  75,  10,  95,  80,  40,   70,  130,  35,  65,  70,  45,  55,   50,   90,  450  },
  {    65,  35,  80,  60,  80,  50,  95,  80,  40,   25,  70,   30,  55,  35,  75,  50,   90,   90,  100  },
  {    55,  55,  70,  70,  75,  5,   50,  80,  40,   25,  20,   35,  95,  70,  80,  55,   130,  90,  450  },
  {    65,  62,  15,  12,  80,  50,  95,  80,  40,   25,  70,   30,  100, 100, 48,  50,   90,   90,  200  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  40,   25,  120,  38,  55,  35,  75,  55,   90,   90,  400  },
  {    65,  62,  15,  12,  80,  50,  95,  80,  40,   25,  70,   30,  100, 100, 48,  50,   90,   90,  200  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  40,   25,  120,  38,  55,  35,  75,  55,   90,   90,  400  },
  {    65,  62,  15,  12,  80,  50,  95,  80,  40,   25,  70,   30,  100, 100, 48,  50,   90,   90,  200  },
  {    65,  35,  80,  60,  80,  10,  95,  80,  40,   70,  130,  45,  55,  35,  75,  65,   50,   90,  400  },
  {    65,  35,  80,  60,  80,  50,  95,  80,  40,   25,  70,   30,  55,  35,  75,  50,   90,   90,  100  },
  {    65,  35,  80,  60,  80,  5,   50,  80,  40,   25,  20,   30,  55,  35,  75,  50,   130,  90,  450  },
  {    65,  35,  80,  60,  80,  50,  95,  80,  40,   25,  70,   30,  55,  35,  75,  50,   90,   90,  100  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  40,   25,  120,  38,  55,  35,  75,  55,   90,   90,  450  },
  {    65,  35,  80,  60,  80,  50,  95,  80,  40,   25,  70,   30,  55,  35,  75,  50,   90,   90,  100  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  40,   25,  120,  38,  55,  35,  75,  55,   90,   90,  450  },
  {    60,  35,  80,  60,  72,  50,  95,  80,  40,   25,  70,   38,  55,  35,  75,  55,   90,   90,  450  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  40,   25,  120,  38,  55,  35,  75,  55,   90,   90,  400  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  10,   90,  120,  38,  55,  35,  75,  55,   50,   90,  400  },
  {    60,  35,  80,  60,  72,  5,   20,  100, 40,   25,  120,  38,  55,  35,  75,  55,   130,  90,  400  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  10,   90,  120,  38,  55,  35,  75,  55,   50,   90,  450  },
  {    60,  35,  80,  60,  72,  5,   20,  100, 40,   25,  120,  38,  55,  35,  75,  55,   130,  90,  450  },
  {    60,  35,  80,  60,  72,  50,  95,  80,  40,   25,  70 ,  38,  55,  35,  75,  55,   90,   90,  450  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  5,   95,  15,  100,  25,  80,   38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  40,  95,  15,  100,  25,  115,  38,  55,  35,  75,  55,   90,   90,  300  },
  {    60,  35,  80,  60,  72,  50,  95,  80,  40,   25,  70,   38,  55,  35,  75,  55,   90,   90,  450  },
  {    60,  35,  80,  60,  72,  5,   95,  80,  40,   25,  120,  38,  55,  35,  75,  55,   90,   90,  450  },
  {    65,  35,  80,  60,  80,  10,  80,  20,  120,  60,  20,   30,  55,  35,  75,  50,   50,   90,  500  },
  {    65,  35,  80,  60,  80,  50,  95,  80,  40,   25,  70,   30,  55,  35,  75,  50,   90,   90,  400  },
  {    65,  35,  80,  60,  80,  100, 60,  20,  90,   80,  120,  30,  55,  35,  75,  50,   130,  90,  500  },
  {    65,  35,  80,  60,  80,  100, 95,  80,  40,   25,  20,   30,  55,  35,  75,  50,   90,   90,  300  } 
};


/*============================================================================*/

int Kick_Step = 9;
int Kick  [][ALLMATRIX]   PROGMEM  =  {
  //   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  G12, G14,  ms
  {    77,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  68,  90,  90,  500   },
  {    79,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90,  500   },
  {    79,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  52,  90,  90,  500   },
  {    79,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  19,  35,  75,  52,  90,  90,  500   },
  {    79,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  82,  35,  75,  52,  90,  90,  250   },
  {    79,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  53,  35,  75,  52,  90,  90,  500   },
  {    79,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  53,  35,  75,  52,  90,  90,  500   },
  {    67,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  53,  35,  75,  52,  90,  90,  500   },
  {    65,  35,  80,  60,  80, 100,  95,  80,  40,  25,  20,  30,  55,  35,  75,  50,  90,  90,  500   },
};


/*============================================================================*/

void Set_PWM_to_Servo(int iServo, int iValue)
{
  int NewPWM = map(iValue, PWM_Min, PWM_Max, Servo_Min, Servo_Max);

  if (iServo >= 17)
  {
    GPIO13SERVO.write(iValue);//GPIO14servo
  }
  else if (iServo >= 16)
  {
    GPIO12SERVO.write(iValue);
  }
  else
  {
    pwm.setPWM(iServo, 0, NewPWM);
  }
}


/*============================================================================*/

void Servo_PROGRAM_Zero()
{
  // Clearing old motor values
  for ( int Index = 0; Index < ALLMATRIX; Index++)
  {
    Running_Servos[Index] = Servo_Act_0[Index] + (int8_t)EEPROM.read(Index);
  }

  // Set new Values
  for (int iServo = 0; iServo < ALLSERVOS; iServo++)
  {
    Set_PWM_to_Servo(iServo, Running_Servos[iServo]);
    delay(10);
  }
}

/*============================================================================*/

void Servo_PROGRAM_Initial()
{
  // Clearing old motor values
  for ( int Index = 0; Index < ALLMATRIX; Index++)
  {
    Running_Servos[Index] = Servo_Act_1[Index] + (int8_t)EEPROM.read(Index);
  }

  // Bring back the motor value
  for (int iServo = 0; iServo < ALLSERVOS; iServo++)
  {
    Set_PWM_to_Servo(iServo, Running_Servos[iServo]);
    delay(10);
  }
}

/*============================================================================*/

void Servo_PROGRAM_Run(int iMatrix[][ALLMATRIX],  int iSteps)
{
  int INT_TEMP_A, INT_TEMP_B, INT_TEMP_C;

  for ( int MainLoopIndex = 0; MainLoopIndex < iSteps; MainLoopIndex++)  // Motor Main loop
  {
    // Total time of the step
    int TotalStepTime = iMatrix [ MainLoopIndex ] [ ALLMATRIX - 1 ] + (int8_t)EEPROM.read(ALLMATRIX - 1);

    // Base delay in a step
    int Step_Base_Delay = TotalStepTime / BASEDELAYTIME;

    // Steps Difference
    for ( int InterStepLoop = 0; InterStepLoop < Step_Base_Delay; InterStepLoop++)
    {

      for (int ServoIndex = 0; ServoIndex < ALLSERVOS; ServoIndex++)  // Motor Main loop
      {

        INT_TEMP_A = Running_Servos[ServoIndex];       // Motor Current Position
        INT_TEMP_B = iMatrix[MainLoopIndex][ServoIndex] + (int8_t)EEPROM.read(ServoIndex);    // Motor Target Position

        if (INT_TEMP_A == INT_TEMP_B)         // If the Motor value is Equal
        {
          INT_TEMP_C = INT_TEMP_B;
        }

        else if (INT_TEMP_A > INT_TEMP_B)   // If the Motor value is Less
        {
          // Motor difference = map( Execution Time, Motor Starting time, Motor Ending time, Internal difference start value, Miximum Internal difference)
          INT_TEMP_C =  map(BASEDELAYTIME * InterStepLoop, 0, TotalStepTime, 0, INT_TEMP_A - INT_TEMP_B);

          if (INT_TEMP_A - INT_TEMP_C >= INT_TEMP_B)
          {
            Set_PWM_to_Servo(ServoIndex, INT_TEMP_A - INT_TEMP_C);
          }
        }

        else if (INT_TEMP_A < INT_TEMP_B)   // If the Motor value is Greater
        {
          // Motor difference = map( Execution Time, Motor Starting time, Motor Ending time, Internal difference start value, Miximum Internal difference)
          INT_TEMP_C =  map(BASEDELAYTIME * InterStepLoop, 0, TotalStepTime, 0, INT_TEMP_B - INT_TEMP_A);

          if (INT_TEMP_A + INT_TEMP_C <= INT_TEMP_B)
          {
            Set_PWM_to_Servo(ServoIndex, INT_TEMP_A + INT_TEMP_C);
          }
        }

      }

      delay(BASEDELAYTIME);
    }

    // Bring Back to the initial state
    for ( int Index = 0; Index < ALLMATRIX; Index++)
    {
      Running_Servos[Index] = iMatrix[MainLoopIndex][Index] + (int8_t)EEPROM.read(Index);
    }

  }

}

/*============================================================================*/

void Get_PWM_Frequency()
{
  int iClear_Freq =  (int8_t)EEPROM.read(ALLMATRIX);

  // Clearing Frequency error
  if (iClear_Freq > 120 || iClear_Freq < -120)
  {
    EEPROM.write(ALLMATRIX, 0);
    EEPROM.commit();
    iClear_Freq = 0;
  }

  Set_PWM_Freq = PWM_Frequency + iClear_Freq;
}

/*============================================================================*/

void writeKeyValue(int8_t key, int8_t value)
{
  EEPROM.write(key, value);
  EEPROM.commit();
}

/*============================================================================*/

int8_t readKeyValue(int8_t key)
{
  Serial.println("read");
  Serial.println(key);

  int8_t value = EEPROM.read(key);
}

/*============================================================================*/

void handleAction(WiFiClient client, String req, HTTPMethod method)
{
  server.send(200, "VCHR", "Voice Controlled Humanoid Robot");
}


/*============================================================================*/
void handleSave()
{
  String key = server.arg("key");
  String value = server.arg("value");

  int8_t keyInt = key.toInt();
  int8_t valueInt = value.toInt();

  // Software PWM PIN detach
  GPIO13SERVO.detach();//GPIO14SERVO
  GPIO12SERVO.detach();
  delay(50);

  if (keyInt == 100)
  {
    writeKeyValue(0, 0);
    writeKeyValue(1, 0);
    writeKeyValue(2, 0);
    writeKeyValue(3, 0);
    writeKeyValue(4, 0);
    writeKeyValue(5, 0);
    writeKeyValue(6, 0);
    writeKeyValue(7, 0);
    writeKeyValue(8, 0);
    writeKeyValue(9, 0);
    writeKeyValue(10, 0);
    writeKeyValue(11, 0);
    writeKeyValue(12, 0);
    writeKeyValue(13, 0);
    writeKeyValue(14, 0);
    writeKeyValue(15, 0);
    writeKeyValue(16, 0);
    writeKeyValue(17, 0);
    writeKeyValue(18, 0);
    writeKeyValue(19, 0);
  }
  else
  {
    // Confirm the data is between -124 ~ 124
    if (valueInt >= -124 && valueInt <= 124)
    {
      // Storing the Correct Value
      writeKeyValue(keyInt, valueInt);

      // Update the Set_PWM_Freq with Correct value
      if (keyInt == 19) {
        Set_PWM_Freq = PWM_Frequency + valueInt;
        pwm.setPWMFreq(Set_PWM_Freq);
      }
    }
  }

  // Software PWM PIN attach
  GPIO13SERVO.attach(13);//servo14
  GPIO12SERVO.attach(12);
  delay(10);

  server.send(200, "text/html", "(key, value)=(" + key + "," + value + ")");
}


/*============================================================================*/
void handleController()
{
  String pm = server.arg("pm");
  String pms = server.arg("pms");
  String gpid = server.arg("gpid");
  String servo = server.arg("servo");

  if (pm != "")
  {
    Servo_PROGRAM = pm.toInt();
  }

  if (pms != "")
  {
    Servo_PROGRAM_Stack = pms.toInt();
  }

  if (servo != "")
  {
    int Servo_ID = servo.toInt();
    String ival = server.arg("value");
    int Servo_PWM = ival.toInt() + (int8_t)EEPROM.read(Servo_ID);
    int pulselength = map(Servo_PWM, PWM_Min, PWM_Max, Servo_Min, Servo_Max);

    Serial.print("Servo ID = ");
    Serial.print(Servo_ID);
    Serial.print(", PWM = ");
    //Serial.println(pulselength);

    pwm.setPWM(Servo_ID, 0, pulselength);
  }

  if (gpid != "")
  {
    GPIO_ID = gpid.toInt();

    if (GPIO_ID == 12) {
      String ival = server.arg("value");
      GPIO12_PWM = ival.toInt() + (int8_t)EEPROM.read(16);
      GPIO12SERVO.write(GPIO12_PWM);
    }

    if (GPIO_ID == 13) { //14
      String ival = server.arg("value");
      GPIO13_PWM = ival.toInt() + (int8_t)EEPROM.read(17);//GPIO14
      GPIO13SERVO.write(GPIO13_PWM);
    }
  }

  server.send(200, "text/html", "(pm, pms)=(" + pm + "," + pms + ")");

}


/*============================================================================
  Transmission Mode
  ============================================================================*/
void handleOnLine()
{
  String m0 = server.arg("m0");
  String m1 = server.arg("m1");
  String m2 = server.arg("m2");
  String m3 = server.arg("m3");
  String m4 = server.arg("m4");
  String m5 = server.arg("m5");
  String m6 = server.arg("m6");
  String m7 = server.arg("m7");
  String m8 = server.arg("m8");
  String m9 = server.arg("m9");
  String m10 = server.arg("m10");
  String m11 = server.arg("m11");
  String m12 = server.arg("m12");
  String m13 = server.arg("m13");
  String m14 = server.arg("m14");
  String m15 = server.arg("m15");
  String g12 = server.arg("g12");
  String g14 = server.arg("g14");
  String t1 = server.arg("t1");

  int Servo_Value_tmp [][19] = {
    //    0,        1,           2,           3,          4,        5,            6,          7,        8,           9,        10,            11,          12,           13,          14,         15,          G12,         G14,       Time
    {m0.toInt(), m1.toInt(), m2.toInt(), m3.toInt(), m4.toInt(), m5.toInt(), m6.toInt(), m7.toInt(), m8.toInt(), m9.toInt(), m10.toInt(), m11.toInt(), m12.toInt(), m13.toInt(), m14.toInt(), m15.toInt(), g12.toInt(), g14.toInt(), t1.toInt()}
  };

  Servo_PROGRAM_Run(Servo_Value_tmp, 1);

  server.send(200, "text/html", "(m0, m1)=(" + m0 + "," + m1 + ")");
}


/*============================================================================
 Zero Page
  ============================================================================*/

void handleZero()
{
  String content = "";
  content += "<html>";
  content += "<head>";
  content += "<title>MiniPlan Zero Check</title>";
  content += " <style type=\"text/css\">";
  content += "  body {";
  content += "  color: white;";
  content += "  background-color: #000000 }";

  content += "  .pm_btn {";
  content += "  width: 160px;";
  content += "  -webkit-border-radius: 5;";
  content += "  -moz-border-radius: 5;";
  content += "  border-radius: 5px;";
  content += "  font-family: Arial;";
  content += "  color: #ffffff;";
  content += "  font-size: 24px;";
  content += "  background: #3498db;";
  content += "  padding: 10px 20px 10px 20px;";
  content += "  text-decoration: none;";
  content += "}";
  content += ".pm_text {";
  content += "width: 160px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "font-size: 24px;";

  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pm_btn:hover {";
  content += "  background: #3cb0fd;";
  content += "  background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "  text-decoration: none;";
  content += "}";

  content += ".pms_btn {";
  content += "width: 240px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "color: #ffffff;";
  content += "font-size: 24px;";
  content += "background: #3498db;";
  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pms_btn:hover {";
  content += "background: #3cb0fd;";
  content += "background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "text-decoration: none;";
  content += "}";
  content += "  </style>";
  content += "</head>";
  content += "<body>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #6e6e6e;\" type=\"button\" onclick=\"controlGpid(14, 90)\">GPIO 14</button></td>";
  content += "<td><button class=\"pm_btn\" style=\"background: #6e6e6e;\" type=\"button\" onclick=\"controlGpid(12, 90)\">GPIO 12</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(8,40)\">Servo 8</button></td>";
  content += "<td><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(7,80)\">Servo 7</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(9,100)\">Servo 9</button></td>";
  content += "<td><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(6,20)\">Servo 6</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(10,20)\">Servo 10</button></td>";
  content += "<td><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(5, 100)\">Servo 5</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(11,30)\">Servo 11</button></td>";
  content += "<td><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(4,80)\">Servo 4</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(12,55)\">Servo 12</button></td>";
  content += "<td><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(3,60)\">Servo 3</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(13,35)\">Servo 13</button></td>";
  content += "<td><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(2,80)\">Servo 2</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(14,75)\">Servo 14</button></td>";
  content += "<td><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(1,35)\">Servo 1</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(15,50)\">Servo 15</button></td>";
  content += "<td><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(0,65)\">Servo 0</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #ed3db5;\" type=\"button\" onclick=\"controlPm(100)\">ALL</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "</body>";
  content += "<script>";
  content += "function controlServo(id, value) {";
  content += "  var xhttp = new XMLHttpRequest();";

  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?servo=\"+id+\"&value=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";
  content += "function controlGpid(id, value) {";
  content += "  var xhttp = new XMLHttpRequest();";

  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?gpid=\"+id+\"&value=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";

  content += "function controlPm(value) {";
  content += "  var xhttp = new XMLHttpRequest();";
  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?pm=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";

  content += "</script>";
  content += "</html>";

  server.send(200, "text/html", content);
}


/*============================================================================
  Angles Editor 
  ============================================================================*/

void handleEditor()
{
  String content = "";
  content += "<html>";
  content += "<head>";
  content += "  <title>VCHR Motion Editor</title>";
  content += "  <style type=\"text/css\">";
  content += "  body {";
  content += "  color: white;";
  content += "  background-color: #000000 }";

  content += "  .pm_btn {";
  content += "  width: 160px;";
  content += "  -webkit-border-radius: 5;";
  content += "  -moz-border-radius: 5;";
  content += "  border-radius: 5px;";
  content += "  font-family: Arial;";
  content += "  color: #ffffff;";
  content += "  font-size: 24px;";
  content += "  background: #3498db;";
  content += "  padding: 10px 20px 10px 20px;";
  content += "  text-decoration: none;";
  content += "}";
  content += ".pm_text {";
  content += "width: 160px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "font-size: 24px;";

  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pm_btn:hover {";
  content += "  background: #3cb0fd;";
  content += "  background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "  text-decoration: none;";
  content += "}";

  content += ".pms_btn {";
  content += "width: 240px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "color: #ffffff;";
  content += "font-size: 24px;";
  content += "background: #3498db;";
  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pms_btn:hover {";
  content += "background: #3cb0fd;";
  content += "background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "text-decoration: none;";
  content += "}";
  content += "  </style>";
  content += "</head>";
  content += "<body>";

  content += "<table>";
  content += "<tr>";
  content += "<td>GPIO 14  ,  Default value = 90<br/><input class=\"pm_text\" type=\"text\" id=\"gpid_14\" value=\"90\"><button class=\"pm_btn\" style=\"background: #6e6e6e;\" type=\"button\" onclick=\"controlGpid(14, 'gpid_14')\">SEND</button></td>";
  content += "<td>GPIO 12  ,  Default value = 90<br/><input class=\"pm_text\" type=\"text\" id=\"gpid_12\" value=\"90\"><button class=\"pm_btn\" style=\"background: #6e6e6e;\" type=\"button\" onclick=\"controlGpid(12, 'gpid_12')\">SEND</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td>Servo 8  ,  Default value = 40<br/><input class=\"pm_text\" type=\"text\" id=\"servo_8\" value=\"40\"><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(8,'servo_8')\">SEND</button></td>";
  content += "<td>Servo 7  ,  Default value = 80<br/><input class=\"pm_text\" type=\"text\" id=\"servo_7\" value=\"80\"><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(7, 'servo_7')\">SEND</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 9  ,  Default value = 100<br/><input class=\"pm_text\" type=\"text\" id=\"servo_9\" value=\"100\"><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(9,'servo_9')\">SEND</button></td>";
  content += "<td>Servo 6  ,  Default value = 20<br/><input class=\"pm_text\" type=\"text\" id=\"servo_6\" value=\"20\"><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(6,'servo_6')\">SEND</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 10  ,  Default value = 20<br/><input class=\"pm_text\" type=\"text\" id=\"servo_10\" value=\"20\"><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(10,'servo_10')\">SEND</button></td>";
  content += "<td>Servo 5  ,  Default value = 100<br/><input class=\"pm_text\" type=\"text\" id=\"servo_5\" value=\"100\"><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(5,'servo_5')\">SEND</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td>Servo 11  ,  Default value = 30<br/><input class=\"pm_text\" type=\"text\" id=\"servo_11\" value=\"30\"><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(11,'servo_11')\">SEND</button></td>";
  content += "<td>Servo 4  ,  Default value = 80<br/><input class=\"pm_text\" type=\"text\" id=\"servo_4\" value=\"80\"><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(4,'servo_4')\">SEND</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 12  ,  Default value = 55<br/><input class=\"pm_text\" type=\"text\" id=\"servo_12\" value=\"55\"><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(12,'servo_12')\">SEND</button></td>";
  content += "<td>Servo 3  ,  Default value = 60<br/><input class=\"pm_text\" type=\"text\" id=\"servo_3\" value=\"60\"><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(3,'servo_3')\">SEND</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 13  ,  Default value = 35<br/><input class=\"pm_text\" type=\"text\" id=\"servo_13\" value=\"35\"><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(13,'servo_13')\">SEND</button></td>";
  content += "<td>Servo 2  ,  Default value = 80<br/><input class=\"pm_text\" type=\"text\" id=\"servo_2\" value=\"80\"><button class=\"pm_btn\" style=\"background: #f5da81;\" type=\"button\" onclick=\"controlServo(2,'servo_2')\">SEND</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 14  ,  Default value = 75<br/><input class=\"pm_text\" type=\"text\"  id=\"servo_14\" value=\"75\"><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(14,'servo_14')\">SEND</button></td>";
  content += "<td>Servo 1  ,  Default value = 35<br/><input class=\"pm_text\" type=\"text\" id=\"servo_1\" value=\"35\"><button class=\"pm_btn\" style=\"background: #bdbdbd;\" type=\"button\" onclick=\"controlServo(1,'servo_1')\">SEND</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 15  ,  Default value = 50<br/><input class=\"pm_text\" type=\"text\"  id=\"servo_15\" value=\"50\"><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(15,'servo_15')\">SEND</button></td>";
  content += "<td>Servo 0  ,  Default value = 65<br/><input class=\"pm_text\" type=\"text\" id=\"servo_0\" value=\"65\"><button class=\"pm_btn\" type=\"button\" onclick=\"controlServo(0,'servo_0')\">SEND</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #ed3db5;\" type=\"button\" onclick=\"controlPm(99)\">STANDBY POSE</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "</body>";
  content += "<script>";

  content += "function controlServo(id, textId) {";
  content += "  var xhttp = new XMLHttpRequest();";
  content += "  var value = document.getElementById(textId).value;";
  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\",\"controller?servo=\"+id+\"&value=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";
  content += "function controlGpid(id, textId) {";
  content += "  var xhttp = new XMLHttpRequest();";
  content += "  var value = document.getElementById(textId).value;";
  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?gpid=\"+id+\"&value=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";

  content += "function controlPm(value) {";
  content += "  var xhttp = new XMLHttpRequest();";
  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?pm=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";

  content += "</script>";
  content += "</html>";
  server.send(200, "text/html", content);
}


/*============================================================================
  Angles Setting
  ============================================================================*/
void handleSetting()
{
  int servo19Val = readKeyValue(19);
  String servo19ValStr = String(servo19Val);

  int servo18Val = readKeyValue(18);
  String servo18ValStr = String(servo18Val);

  int servo17Val = readKeyValue(17);
  String servo17ValStr = String(servo17Val);

  int servo16Val = readKeyValue(16);
  String servo16ValStr = String(servo16Val);

  int servo15Val = readKeyValue(15);
  String servo15ValStr = String(servo15Val);

  int servo14Val = readKeyValue(14);
  String servo14ValStr = String(servo14Val);

  int servo13Val = readKeyValue(13);
  String servo13ValStr = String(servo13Val);

  int servo12Val = readKeyValue(12);
  String servo12ValStr = String(servo12Val);

  int servo11Val = readKeyValue(11);
  String servo11ValStr = String(servo11Val);

  int servo10Val = readKeyValue(10);
  String servo10ValStr = String(servo10Val);

  int servo9Val = readKeyValue(9);
  String servo9ValStr = String(servo9Val);

  int servo8Val = readKeyValue(8);
  String servo8ValStr = String(servo8Val);

  int servo7Val = readKeyValue(7);
  String servo7ValStr = String(servo7Val);

  int servo6Val = readKeyValue(6);
  String servo6ValStr = String(servo6Val);

  int servo5Val = readKeyValue(5);
  String servo5ValStr = String(servo5Val);

  int servo4Val = readKeyValue(4);
  String servo4ValStr = String(servo4Val);

  int servo3Val = readKeyValue(3);
  String servo3ValStr = String(servo3Val);

  int servo2Val = readKeyValue(2);
  String servo2ValStr = String(servo2Val);

  int servo1Val = readKeyValue(1);
  String servo1ValStr = String(servo1Val);

  int servo0Val = readKeyValue(0);
  String servo0ValStr = String(servo0Val);

  String content = "";
  content += "<html>";
  content += "<head>";
  content += "  <title>MiniPlan Setting</title>";
  content += "  <style type=\"text/css\">";
  content += "  body {";
  content += "    color: white;";
  content += "    background-color: #000000 }";

  content += "  .pm_btn {";
  content += "  width: 120px;";
  content += "  -webkit-border-radius: 5;";
  content += "  -moz-border-radius: 5;";
  content += "  border-radius: 5px;";
  content += "  font-family: Arial;";
  content += "  color: #ffffff;";
  content += "  font-size: 24px;";
  content += "  background: #3498db;";
  content += "  padding: 10px 20px 10px 20px;";
  content += "  text-decoration: none;";
  content += "}";
  content += ".pm_text {";
  content += "width: 80px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "font-size: 24px;";

  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pm_btn:hover {";
  content += "  background: #3cb0fd;";
  content += "  background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "  text-decoration: none;";
  content += "}";

  content += ".pms_btn {";
  content += "width: 160px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "color: #ffffff;";
  content += "font-size: 24px;";
  content += "background: #3498db;";
  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pms_btn:hover {";
  content += "background: #3cb0fd;";
  content += "background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "text-decoration: none;";
  content += "}";
  content += "  </style>";
  content += "</head>";
  content += "<body>";

  content += "<table>";
  content += "<tr>";
  content += "<td>GPIO 14<br/><input class=\"pm_text\" type=\"text\" id=\"servo_17\" value=\"" + servo17ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(17,'servo_17')\">SET</button></td>";
  content += "<td>GPIO 12<br/><input class=\"pm_text\" type=\"text\" id=\"servo_16\" value=\"" + servo16ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(16,'servo_16')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 8<br/><input class=\"pm_text\" type=\"text\" id=\"servo_8\" value=\"" + servo8ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(8,'servo_8')\">SET</button></td>";
  content += "<td>Servo 7<br/><input class=\"pm_text\" type=\"text\" id=\"servo_7\" value=\"" + servo7ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(7,'servo_7')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 9<br/><input class=\"pm_text\" type=\"text\" id=\"servo_9\" value=\"" + servo9ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(9,'servo_9')\">SET</button></td>";
  content += "<td>Servo 6<br/><input class=\"pm_text\" type=\"text\" id=\"servo_6\" value=\"" + servo6ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(6,'servo_6')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 10<br/><input class=\"pm_text\" type=\"text\" id=\"servo_10\" value=\"" + servo10ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(10,'servo_10')\">SET</button></td>";
  content += "<td>Servo 5<br/><input class=\"pm_text\" type=\"text\" id=\"servo_5\" value=\"" + servo5ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(5,'servo_5')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 11<br/><input class=\"pm_text\" type=\"text\" id=\"servo_11\" value=\"" + servo11ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(11,'servo_11')\">SET</button></td>";
  content += "<td>Servo 4<br/><input class=\"pm_text\" type=\"text\" id=\"servo_4\" value=\"" + servo4ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(4,'servo_4')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 12<br/><input class=\"pm_text\" type=\"text\" id=\"servo_12\" value=\"" + servo12ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(12,'servo_12')\">SET</button></td>";
  content += "<td>Servo 3<br/><input class=\"pm_text\" type=\"text\" id=\"servo_3\" value=\"" + servo3ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(3,'servo_3')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 13<br/><input class=\"pm_text\" type=\"text\" id=\"servo_13\" value=\"" + servo13ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(13,'servo_13')\">SET</button></td>";
  content += "<td>Servo 2<br/><input class=\"pm_text\" type=\"text\" id=\"servo_2\" value=\"" + servo2ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(2,'servo_2')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 14<br/><input class=\"pm_text\" type=\"text\" id=\"servo_14\" value=\"" + servo14ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(14,'servo_14')\">SET</button></td>";
  content += "<td>Servo 1<br/><input class=\"pm_text\" type=\"text\" id=\"servo_1\" value=\"" + servo1ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(1,'servo_1')\">SET</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td>Servo 15<br/><input class=\"pm_text\" type=\"text\" id=\"servo_15\" value=\"" + servo15ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(15,'servo_15')\">SET</button></td>";
  content += "<td>Servo 0<br/><input class=\"pm_text\" type=\"text\" id=\"servo_0\" value=\"" + servo0ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(0,'servo_0')\">SET</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td>Delay Time<br/><input class=\"pm_text\" type=\"text\" id=\"servo_18\" value=\"" + servo18ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(18,'servo_18')\">SET</button></td>";
  content += "<td>PWM Frequency Calibration<br/><input class=\"pm_text\" type=\"text\" id=\"servo_19\" value=\"" + servo19ValStr + "\"><button class=\"pm_btn\" type=\"button\" onclick=\"saveServo(19,'servo_19')\">SET</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";
  content += "<br>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pm_btn\" style=\"background: #ed3db5;\" type=\"button\" onclick=\"saveServo(100, 0)\">RESET</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<br>";

  content += "</body>";
  content += "<script>";

  content += "function saveServo(id, textId) {";
  content += "  var xhttp = new XMLHttpRequest();";
  content += "  var value = \"0\";";
  content += "  if(id==100){";
  content += "    document.getElementById(\"servo_19\").value = \"0\";";
  content += "    document.getElementById(\"servo_18\").value = \"0\";";
  content += "    document.getElementById(\"servo_17\").value = \"0\";";
  content += "    document.getElementById(\"servo_16\").value = \"0\";";
  content += "    document.getElementById(\"servo_15\").value = \"0\";";
  content += "    document.getElementById(\"servo_14\").value = \"0\";";
  content += "    document.getElementById(\"servo_13\").value = \"0\";";
  content += "    document.getElementById(\"servo_12\").value = \"0\";";
  content += "    document.getElementById(\"servo_11\").value = \"0\";";
  content += "    document.getElementById(\"servo_10\").value = \"0\";";
  content += "    document.getElementById(\"servo_9\").value = \"0\";";
  content += "    document.getElementById(\"servo_8\").value = \"0\";";
  content += "    document.getElementById(\"servo_7\").value = \"0\";";
  content += "    document.getElementById(\"servo_6\").value = \"0\";";
  content += "    document.getElementById(\"servo_5\").value = \"0\";";
  content += "    document.getElementById(\"servo_4\").value = \"0\";";
  content += "    document.getElementById(\"servo_3\").value = \"0\";";
  content += "    document.getElementById(\"servo_2\").value = \"0\";";
  content += "    document.getElementById(\"servo_1\").value = \"0\";";
  content += "    document.getElementById(\"servo_0\").value = \"0\";";
  content += "  }else{";
  content += "    value = document.getElementById(textId).value;";
  content += "   }";
  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";
  content += "     document.getElementById(\"demo\").innerHTML = xhttp.responseText;";
  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\",\"save?key=\"+id+\"&value=\"+value, true);";
  content += "  xhttp.send();";
  content += "}";

  content += "</script>";
  content += "</html>";
  server.send(200, "text/html", content);
}


/*============================================================================
  Control Screen
  ============================================================================*/

void handleIndex()
{
  String content = "";
  content += "<html>";

  content += "<head>";
  content += "  <title>MiniPlan Controller</title>";
  content += "  <style type=\"text/css\">";
  content += "  body {";
  content += "    color: white;";
  content += "    background-color: #000000 }";

  content += "  .pm_btn {";
  content += "  width: 160px;";
  content += "  -webkit-border-radius: 5;";
  content += "  -moz-border-radius: 5;";
  content += "  border-radius: 5px;";
  content += "  font-family: Arial;";
  content += "  color: #ffffff;";
  content += " font-size: 24px;";
  content += "background: #3498db;";
  content += "  padding: 10px 20px 10px 20px;";
  content += "  text-decoration: none;";
  content += "}";

  content += ".pm_btn:hover {";
  content += "  background: #3cb0fd;";
  content += "  background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "  background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "  text-decoration: none;";
  content += "}";

  content += ".pms_btn {";
  content += "width: 240px;";
  content += "-webkit-border-radius: 5;";
  content += "-moz-border-radius: 5;";
  content += "border-radius: 5px;";
  content += "font-family: Arial;";
  content += "color: #ffffff;";
  content += "font-size: 24px;";
  content += "background: #3498db;";
  content += "padding: 10px 20px 10px 20px;";
  content += "text-decoration: none;";
  content += "}";

  content += ".pms_btn:hover {";
  content += "background: #3cb0fd;";
  content += "background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: -o-linear-gradient(top, #3cb0fd, #3498db);";
  content += "background-image: linear-gradient(to bottom, #3cb0fd, #3498db);";
  content += "text-decoration: none;";
  content += "}";
  content += " </style>";
  content += "</head>";


  content += "<body>";
  content += "<table>";
  content += "<tr>";
  content += "<td><button  class=\"pm_btn\" type=\"button\" onclick=\"controlPm(3)\">Turn Left</button></td>";
  content += "<td><button  class=\"pm_btn\" type=\"button\" onclick=\"controlPm(1)\">Forward</button></td>";
  content += "<td><button  class=\"pm_btn\" type=\"button\" onclick=\"controlPm(4)\">Turn Right</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td><button  class=\"pm_btn\" type=\"button\" onclick=\"controlPm(5)\">Take Left</button></td>";
  content += "<td><button  class=\"pm_btn\" style=\"background: #ed3db5;\" type=\"button\" onclick=\"controlPm(99)\">STANDBY</button></td>";
  content += "<td><button  class=\"pm_btn\" type=\"button\" onclick=\"controlPm(6)\">Take Right</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td></td>";
  content += "<td><button  class=\"pm_btn\" type=\"button\" onclick=\"controlPm(2)\">Back</button></td>";
  content += "<td></td>";
  content += "</tr>";
  content += "</table>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pms_btn\" type=\"button\" onclick=\"controlPm(11)\">Get Up</button></td>";
  content += "<td><button class=\"pms_btn\" type=\"button\" onclick=\"controlPm(12)\">Stand Up</button></td>";
  content += "</tr>";
  content += "</table>";

  content += "<table>";
  content += "<tr>";
  content += "<td><button class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(1)\">Bow</button></td>";
  content += "<td><button  class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(4)\">Thank You</button></td>";
  content += "</tr>";
  content += "<tr>";
  content += "<td><button class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(2)\">Say Hello</button></td>";
  content += "<td><button  class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(5)\">Balance</button></td>";
  content += "</tr>";
  content += "<tr>";
  content += "<td><button class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(3)\">Dance</button></td>";
  content += "<td><button  class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(6)\">Warm Up</button></td>";
  content += "</tr>";
  content += "<tr>";
  content += "<td><button class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(7)\">Shake Hand</button></td>";
  content += "<td><button  class=\"pms_btn\" style=\"background: #df0707;\" type=\"button\" onclick=\"controlPms(8)\">Driving Dance</button></td>";
  content += "</tr>";

  content += "<tr>";
  content += "<td colspan=\"2\"><center><button  class=\"pms_btn\" style=\"background: #04b404;\" type=\"button\" onclick=\"controlPms(99)\">All Functions</button></center></td>";
  content += "</tr>";
  content += "</table>";

  content += "<table>";
  content += "<tr>";
  content += "<td>\"" + Project_Name + "\"</td>";
  content += "</tr>";
  content += "</table>";

  content += "</body>";
  content += "<script>";
  content += "function controlPm(id) {";
  content += "var xhttp = new XMLHttpRequest();";
  content += "xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";

  content += "    }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?pm=\"+id, true);";
  content += "  xhttp.send();";
  content += "}";
  content += "function controlPms(id) {";
  content += "  var xhttp = new XMLHttpRequest();";
  content += "  xhttp.onreadystatechange = function() {";
  content += "    if (xhttp.readyState == 4 && xhttp.status == 200) {";

  content += " }";
  content += "  };";
  content += "  xhttp.open(\"GET\", \"controller?pms=\"+id, true);";
  content += "  xhttp.send();";
  content += "}";
  content += "</script>";
  content += "</html>";

  server.send(200, "text/html", content);
}


/*============================================================================*/
// Activate Web Server
void enableWebServer()
{
  HTTPMethod getMethod = HTTP_GET;

  server.on("/controller", getMethod, handleController);
  server.on("/save", getMethod, handleSave);

  server.on("/", getMethod, handleIndex);
  server.on("/editor", getMethod, handleEditor);
  server.on("/zero", getMethod, handleZero);
  server.on("/setting", getMethod, handleSetting);

  server.on("/online", getMethod, handleOnLine);

  server.begin();
}

/*============================================================================*/
void setup(void) {// UART(Universal Asynchronous Receiver/Transmitter)
  
  //bit per second
  Serial.begin(9600);
 
  Serial.println("VCHR Start");


  // PCA9685(PWM module) OE(output enable) PIN
  pinMode(13, OUTPUT);
  digitalWrite(13, LOW);


  // Initialize I2C(inter-integrated circuit)
  Wire.begin(4, 5);


  // AP SSID Name
  uint8_t mac[WL_MAC_ADDR_LENGTH];
  WiFi.softAPmacAddress(mac);
  String macID = String(mac[WL_MAC_ADDR_LENGTH - 2], HEX) + String(mac[WL_MAC_ADDR_LENGTH - 1], HEX);
  macID.toUpperCase();

  String AP_NameString = "VCHR-" + macID;

  char AP_NameChar[AP_NameString.length() + 1];
  memset(AP_NameChar, 0, AP_NameString.length() + 1);

  for (int i = 0; i < AP_NameString.length(); i++)
    AP_NameChar[i] = AP_NameString.charAt(i);

  WiFi.softAP(AP_NameChar, WiFi_Pass);
  IPAddress myIP = WiFi.softAPIP();


  // EEPROM
  EEPROM.begin(512);
  delay(10);


  // PWMServoDriver
  pwm.begin();
  Get_PWM_Frequency();
  pwm.setPWMFreq(Set_PWM_Freq);


  // Software PWM PIN
  GPIO12SERVO.attach(12);
  GPIO13SERVO.attach(13);//GPIO14SERVO


  // Bring Robot to an Initial Position 
  for ( int Index = 0; Index < ALLMATRIX; Index++)
  {
    Running_Servos[Index] = Servo_Act_1[Index] + (int8_t)EEPROM.read(Index);
  }

  // Web Page
 enableWebServer();
}

/*============================================================================*/

void loop(void) {
server.handleClient();

if(Serial.available() > 0){ 
  state = Serial.read(); 
  Servo_PROGRAM = state; 
  Serial.println(Servo_PROGRAM);
  }

  if (Servo_PROGRAM >= 1 )
  {
    switch (Servo_PROGRAM)
    {
      case 1:  // Forward
        Servo_PROGRAM_Run(Forward, Forward_Step);
        Servo_PROGRAM_Initial();
        break;
      case 2:  // Back
        Servo_PROGRAM_Run(Back, Back_Step);
        Servo_PROGRAM_Initial();
        break;
      case 3:  // Turn left
        Servo_PROGRAM_Run(Turn_Left, Turn_Left_Step);
        Servo_PROGRAM_Initial();
        break;
      case 4:  // Turn right
        Servo_PROGRAM_Run(Turn_Right, Turn_Right_Step);
        Servo_PROGRAM_Initial();
        break;
      case 5:  // Take Left
        Servo_PROGRAM_Run(Take_Left, Take_Left_Step);
        Servo_PROGRAM_Initial();
        break;
      case 6:  // Take Right
        Servo_PROGRAM_Run(Take_Right, Take_Right_Step);
        Servo_PROGRAM_Initial();
        break;
      case 11:  // Get Up
        Servo_PROGRAM_Run(Get_Up, Get_Up_Step);
        Servo_PROGRAM_Initial();
        break;
      case 12:  // Stand Up
        Servo_PROGRAM_Run(Stand_Up, Stand_Up_Step);
        Servo_PROGRAM_Initial();
        break;
      case 13:  // Bow
        Servo_PROGRAM_Run(Bow, Bow_Step);
        Servo_PROGRAM_Initial();
        break;
      case 14:  // Say Hello
        Servo_PROGRAM_Run(Say_Hello, Say_Hello_Step);
        Servo_PROGRAM_Initial();
        break;
      case 15:  // Dance
        Servo_PROGRAM_Run(Dance, Dance_Step);
        Servo_PROGRAM_Initial();
        break;
      case 16:  // Thank You
        Servo_PROGRAM_Run(Thank_You, Thank_You_Step);
        Servo_PROGRAM_Initial();
        break;      
      case 17:  // One Leg Balance
        Servo_PROGRAM_Run(One_Leg_Balance, One_Leg_Balance_Step);
        Servo_PROGRAM_Initial();
        break;
      case 18:  // Warm Up
        Servo_PROGRAM_Run(Warm_Up, Warm_Up_Step);
        Servo_PROGRAM_Initial();
        break;
      case 19:  // Shake Hand
        Servo_PROGRAM_Run(Shake_Hand, Shake_Hand_Step);
        Servo_PROGRAM_Initial();
        break;
      case 20:  // Driving Dance
        Servo_PROGRAM_Run(Driving_Dance, Driving_Dance_Step);
        Servo_PROGRAM_Initial();
        break;
      case 21:  // All Functions
        Servo_PROGRAM_Run(Bow, Bow_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Say_Hello, Say_Hello_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Warm_Up, Warm_Up_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Dance, Dance_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Thank_You, Thank_You_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(One_Leg_Balance, One_Leg_Balance_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Bow, Bow_Step);
        Servo_PROGRAM_Initial();
        break;
        case 22:  // Kick
        Servo_PROGRAM_Run(Kick, Kick_Step);
        Servo_PROGRAM_Initial();
        break;
        case 23:  // See Left
        GPIO12SERVO.write(0);
        delay(300);
        break;
        case 24:  // See Right
        GPIO12SERVO.write(180);
        delay(300);
        break;     
      case 99:  // Standby
        Servo_PROGRAM_Initial();
        delay(300);
        break;
      case 100: // Return to zero
        Servo_PROGRAM_Zero();
        delay(300);
        break;
    }
    
    Servo_PROGRAM = 0;
  }
  
 // !28 values in int
  if (Servo_PROGRAM_Stack >= 1)
  {
    switch (Servo_PROGRAM_Stack)
    {
      case 1:  // Bow
        Servo_PROGRAM_Run(Bow, Bow_Step);
        Servo_PROGRAM_Initial();
        break;
      case 2:  // Say Hello
        Servo_PROGRAM_Run(Say_Hello, Say_Hello_Step);
        Servo_PROGRAM_Initial();
        break;
      case 3:  // Dance
        Servo_PROGRAM_Run(Dance, Dance_Step);
        Servo_PROGRAM_Initial();
        break;
      case 4:  // Thank_You
        Servo_PROGRAM_Run(Thank_You, Thank_You_Step);
        Servo_PROGRAM_Initial();
        break;
      case 5:  // One Leg Balance
        Servo_PROGRAM_Run(One_Leg_Balance, One_Leg_Balance_Step);
        Servo_PROGRAM_Initial();
        break;
      case 6:  // Warm Up 
        Servo_PROGRAM_Run(Warm_Up, Warm_Up_Step);
        Servo_PROGRAM_Initial();
        break;
      case 7:  // Shake Hand
        Servo_PROGRAM_Run(Shake_Hand, Shake_Hand_Step);
        Servo_PROGRAM_Initial();
        break;
      case 8:  // Driving Dance
        Servo_PROGRAM_Run(Driving_Dance, Driving_Dance_Step);
        Servo_PROGRAM_Initial();
        break;
      case 99:  // All Functions
        Servo_PROGRAM_Run(Bow, Bow_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Say_Hello, Say_Hello_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Warm_Up, Warm_Up_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Dance, Dance_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Thank_You, Thank_You_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(One_Leg_Balance, One_Leg_Balance_Step);
        Servo_PROGRAM_Initial();
        delay(1000);
        Servo_PROGRAM_Run(Bow, Bow_Step);
        Servo_PROGRAM_Initial();
        break;
    }
    Servo_PROGRAM_Stack = 0;
  }

}
